version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flowshield-db
    environment:
      POSTGRES_DB: flowshield
      POSTGRES_USER: flowshield
      POSTGRES_PASSWORD: flowshield_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flowshield -d flowshield"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: flowshield-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FlowShield API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flowshield-api
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://flowshield:flowshield_password@postgres:5432/flowshield
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped

  # FlowShield Client (React)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: flowshield-client
    environment:
      REACT_APP_API_URL: http://localhost:3000
      NODE_ENV: development
    ports:
      - "5173:5173"
    depends_on:
      - api
    volumes:
      - ./client:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: flowshield-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - client
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 